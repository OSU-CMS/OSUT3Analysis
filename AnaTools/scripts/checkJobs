#!/usr/bin/env python3

import os
import subprocess
import sys
import mmap
from optparse import OptionParser

def logsWithMatches(logs, matchingStrings, vetoStrings = None):
  values = []
  for log in logs:
    f = open(log)
    s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)

    isMatched = True
    if not vetoStrings is None:
      for v in vetoStrings:
        if s.find(v) != -1:
          isMatched = False
          break

    if not isMatched:
      continue

    isMatched = False
    for match in matchingStrings:
      if s.find(match) != -1:
        isMatched = True
        break

    if isMatched:
      values.append(log)

  return values

def correctRunningAfterRemoved(logs, running, removalString):
  for log in logs:
    f = open(log)
    s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)

    lastRemoval = s.rfind(removalString)
    lastRunning = s.rfind('Job executing on host')

    if lastRunning != -1 and lastRunning > lastRemoval:
      logs.remove(log)
      running.append(log)

def concatenateJobNumbers(jobNumbers):
    seq = []
    final = []
    last = 0

    for index, val in enumerate(jobNumbers):

        if last + 1 == val or index == 0:
            seq.append(val)
            last = val
        else:
            if len(seq) > 1:
               final.append(str(seq[0]) + '-' + str(seq[len(seq)-1]))
            else:
               final.append(str(seq[0]))
            seq = []
            seq.append(val)
            last = val

        if index == len(jobNumbers) - 1:
            if len(seq) > 1:
                final.append(str(seq[0]) + '-' + str(seq[len(seq)-1]))
            else:
                final.append(str(seq[0]))

    final_str = ', '.join(map(str, final))
    return final_str

def printJobs(logs, desc):
  jobRanges = {}
  for log in logs:
    dataset = log.split('/')[-2]
    jobNumber = int(os.path.basename(log).split('_')[-1][:-4]) # condor_N.log or condor_dataset_N.log
    if not dataset in jobRanges:
      jobRanges[dataset] = [jobNumber];
    else:
      jobRanges[dataset].append(jobNumber)
  print(desc)
  for dataset in jobRanges:
    jobRanges[dataset].sort()
    print(dataset + ': ' + concatenateJobNumbers(jobRanges[dataset]))
  print

parser = OptionParser("usage: %prog [options] workDirectory")
parser.add_option("--printSuccess", dest="printSuccess", action="store_true", default=False, help="Print all successful jobs.")
parser.add_option("--printFail",    dest="printFail",    action="store_true", default=False, help="Print all failed jobs.")
parser.add_option("--printRemoved", dest="printRemoved", action="store_true", default=False, help="Print all removed jobs.")
parser.add_option("--printRunning", dest="printRunning", action="store_true", default=False, help="Print all running jobs.")
parser.add_option("--printAborted", dest="printAborted", action="store_true", default=False, help="Print all aborted jobs.")
parser.add_option("--printQueued",  dest="printQueued",  action="store_true", default=False, help="Print all queued jobs.")
parser.add_option("--printAll",     dest="printAll",     action="store_true", default=False, help="Print all jobs and their statuses.")

(options, args) = parser.parse_args()

if not len(args) == 1:
  parser.print_help()
  sys.exit()

workDir = args[0]

if not os.path.isdir(workDir):
  print("ERROR: " + workDir + " is not a directory.")
  sys.exit()

logs = subprocess.check_output('find ' + workDir + ' -type f -regex ".*\/condor_[^/]*\.log$"', shell = True).split('\n')[:-1]

executed = []
done = []
successful = []
removed = []
aborted = []
failed = []
queued = []

if len(logs) > 0:
  executed = logsWithMatches(logs, ['Job executing on host'])

  if len(executed) > 0:
    done = logsWithMatches(executed, ['return value', 'signal'])
    if len(done) > 0:
      successful = logsWithMatches(done, ['return value 0'])
    removed = logsWithMatches(executed, ['SYSTEM_PERIODIC_REMOVE'], ['return value', 'signal'])

  aborted = logsWithMatches(logs, ['Job was aborted by the user'], ['return value', 'signal'])

  # failed: done but not successful
  failed = list(set(done) - set(successful))

  # running: executed but neither done nor removed nor aborted
  running = list(set(executed) - set(done) - set(removed) - set(aborted))

  # any removed or aborted jobs that were resubmitted and are now running need to be moved into 'running'
  correctRunningAfterRemoved(aborted, running, 'Job was aborted by the user')
  correctRunningAfterRemoved(removed, running, 'SYSTEM_PERIODIC_REMOVE')

  # queued: not executed and not aborted
  queued = list(set(logs) - set(executed) - set(aborted))

nTotal = float(len(logs))
successfulFraction = float(len(successful)) / nTotal * 100.0
failedFraction     = float(len(failed))     / nTotal * 100.0
removedFraction    = float(len(removed))    / nTotal * 100.0
abortedFraction    = float(len(aborted))    / nTotal * 100.0
runningFraction    = float(len(running))    / nTotal * 100.0
queuedFraction     = float(len(queued))     / nTotal * 100.0

print
print('Job summary: ' + workDir)
print
print('Jobs finished successfully:', len(successful), '/',  int(nTotal), '(' + "{0:.2f}".format(successfulFraction) + '%)')
print('Jobs failed:               ', len(failed),     '/',  int(nTotal), '(' + "{0:.2f}".format(failedFraction) + '%)')
print('Jobs removed by system:    ', len(removed),    '/',  int(nTotal), '(' + "{0:.2f}".format(removedFraction) + '%)')
print('Jobs aborted by user:      ', len(aborted),    '/',  int(nTotal), '(' + "{0:.2f}".format(abortedFraction) + '%)')
print('Jobs running:              ', len(running),    '/',  int(nTotal), '(' + "{0:.2f}".format(runningFraction) + '%)')
print('Jobs queued:               ', len(queued),     '/',  int(nTotal), '(' + "{0:.2f}".format(queuedFraction) + '%)')
print

if options.printSuccess or options.printAll:
  printJobs(successful, "Successful jobs:")

if options.printFail or options.printAll:
  printJobs(failed, "Failed jobs:")

if options.printRemoved or options.printAll:
  printJobs(removed, "Removed jobs:")

if options.printAborted or options.printAll:
  printJobs(aborted, "Aborted jobs:")

if options.printRunning or options.printAll:
  printJobs(running, "Running jobs:")

if options.printQueued or options.printAll:
  printJobs(queued, "Queued jobs:")
